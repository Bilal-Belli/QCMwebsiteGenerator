/*
 * generated by Xtext 2.37.0
 */
package org.example.qcm.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.qcm.dsl.qcmDsl.Etiquette;
import org.example.qcm.dsl.qcmDsl.Proposition;
import org.example.qcm.dsl.qcmDsl.QcmDslPackage;
import org.example.qcm.dsl.qcmDsl.Question;
import org.example.qcm.dsl.qcmDsl.Questionnaire;
import org.example.qcm.dsl.services.QcmDslGrammarAccess;

@SuppressWarnings("all")
public class QcmDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QcmDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QcmDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QcmDslPackage.ETIQUETTE:
				sequence_Etiquette(context, (Etiquette) semanticObject); 
				return; 
			case QcmDslPackage.PROPOSITION:
				sequence_Proposition(context, (Proposition) semanticObject); 
				return; 
			case QcmDslPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case QcmDslPackage.QUESTIONNAIRE:
				sequence_Questionnaire(context, (Questionnaire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Etiquette returns Etiquette
	 *
	 * Constraint:
	 *     nom=ID
	 * </pre>
	 */
	protected void sequence_Etiquette(ISerializationContext context, Etiquette semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QcmDslPackage.Literals.ETIQUETTE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QcmDslPackage.Literals.ETIQUETTE__NOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEtiquetteAccess().getNomIDTerminalRuleCall_0(), semanticObject.getNom());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Proposition returns Proposition
	 *
	 * Constraint:
	 *     (texte=STRING estCorrecte=BOOLEAN?)
	 * </pre>
	 */
	protected void sequence_Proposition(ISerializationContext context, Proposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (texte=STRING (type='SIMPLE' | type='MULTIPLE') difficulte=INT propositions+=Proposition+ (etiquettes+=Etiquette etiquettes+=Etiquette*)?)
	 * </pre>
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Questionnaire returns Questionnaire
	 *
	 * Constraint:
	 *     (name=ID melange=BOOLEAN? questions+=Question*)
	 * </pre>
	 */
	protected void sequence_Questionnaire(ISerializationContext context, Questionnaire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
