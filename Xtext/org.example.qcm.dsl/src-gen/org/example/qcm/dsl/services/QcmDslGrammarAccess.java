/*
 * generated by Xtext 2.37.0
 */
package org.example.qcm.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QcmDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.qcm.dsl.QcmDsl.Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMelangeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMelangeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMelangeBOOLEANParserRuleCall_3_2_0 = (RuleCall)cMelangeAssignment_3_2.eContents().get(0);
		private final Assignment cQuestionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionsQuestionParserRuleCall_4_0 = (RuleCall)cQuestionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Questionnaire:
		//    'questionnaire' name=ID '{'
		//        ('melange' '=' melange=BOOLEAN)?
		//        questions+=Question*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'questionnaire' name=ID '{'
		//    ('melange' '=' melange=BOOLEAN)?
		//    questions+=Question*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'questionnaire'
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('melange' '=' melange=BOOLEAN)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'melange'
		public Keyword getMelangeKeyword_3_0() { return cMelangeKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//melange=BOOLEAN
		public Assignment getMelangeAssignment_3_2() { return cMelangeAssignment_3_2; }
		
		//BOOLEAN
		public RuleCall getMelangeBOOLEANParserRuleCall_3_2_0() { return cMelangeBOOLEANParserRuleCall_3_2_0; }
		
		//questions+=Question*
		public Assignment getQuestionsAssignment_4() { return cQuestionsAssignment_4; }
		
		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_4_0() { return cQuestionsQuestionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.qcm.dsl.QcmDsl.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTexteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexteSTRINGTerminalRuleCall_1_0 = (RuleCall)cTexteAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cTypeAlternatives_5_0 = (Alternatives)cTypeAssignment_5.eContents().get(0);
		private final Keyword cTypeSIMPLEKeyword_5_0_0 = (Keyword)cTypeAlternatives_5_0.eContents().get(0);
		private final Keyword cTypeMULTIPLEKeyword_5_0_1 = (Keyword)cTypeAlternatives_5_0.eContents().get(1);
		private final Keyword cDifficulteKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDifficulteAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDifficulteINTTerminalRuleCall_8_0 = (RuleCall)cDifficulteAssignment_8.eContents().get(0);
		private final Assignment cPropositionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPropositionsPropositionParserRuleCall_9_0 = (RuleCall)cPropositionsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEtiquettesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cEtiquettesAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cEtiquettesEtiquetteParserRuleCall_10_2_0 = (RuleCall)cEtiquettesAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cEtiquettesAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cEtiquettesEtiquetteParserRuleCall_10_3_1_0 = (RuleCall)cEtiquettesAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Question:
		//    'question' texte=STRING '{'
		//        'type' '=' type=('SIMPLE' | 'MULTIPLE')
		//        'difficulte' '=' difficulte=INT
		//        propositions+=Proposition+
		//        ('etiquettes' '=' etiquettes+=Etiquette (',' etiquettes+=Etiquette)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'question' texte=STRING '{'
		//    'type' '=' type=('SIMPLE' | 'MULTIPLE')
		//    'difficulte' '=' difficulte=INT
		//    propositions+=Proposition+
		//    ('etiquettes' '=' etiquettes+=Etiquette (',' etiquettes+=Etiquette)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//texte=STRING
		public Assignment getTexteAssignment_1() { return cTexteAssignment_1; }
		
		//STRING
		public RuleCall getTexteSTRINGTerminalRuleCall_1_0() { return cTexteSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//type=('SIMPLE' | 'MULTIPLE')
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//('SIMPLE' | 'MULTIPLE')
		public Alternatives getTypeAlternatives_5_0() { return cTypeAlternatives_5_0; }
		
		//'SIMPLE'
		public Keyword getTypeSIMPLEKeyword_5_0_0() { return cTypeSIMPLEKeyword_5_0_0; }
		
		//'MULTIPLE'
		public Keyword getTypeMULTIPLEKeyword_5_0_1() { return cTypeMULTIPLEKeyword_5_0_1; }
		
		//'difficulte'
		public Keyword getDifficulteKeyword_6() { return cDifficulteKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//difficulte=INT
		public Assignment getDifficulteAssignment_8() { return cDifficulteAssignment_8; }
		
		//INT
		public RuleCall getDifficulteINTTerminalRuleCall_8_0() { return cDifficulteINTTerminalRuleCall_8_0; }
		
		//propositions+=Proposition+
		public Assignment getPropositionsAssignment_9() { return cPropositionsAssignment_9; }
		
		//Proposition
		public RuleCall getPropositionsPropositionParserRuleCall_9_0() { return cPropositionsPropositionParserRuleCall_9_0; }
		
		//('etiquettes' '=' etiquettes+=Etiquette (',' etiquettes+=Etiquette)*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'etiquettes'
		public Keyword getEtiquettesKeyword_10_0() { return cEtiquettesKeyword_10_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_10_1() { return cEqualsSignKeyword_10_1; }
		
		//etiquettes+=Etiquette
		public Assignment getEtiquettesAssignment_10_2() { return cEtiquettesAssignment_10_2; }
		
		//Etiquette
		public RuleCall getEtiquettesEtiquetteParserRuleCall_10_2_0() { return cEtiquettesEtiquetteParserRuleCall_10_2_0; }
		
		//(',' etiquettes+=Etiquette)*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//','
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//etiquettes+=Etiquette
		public Assignment getEtiquettesAssignment_10_3_1() { return cEtiquettesAssignment_10_3_1; }
		
		//Etiquette
		public RuleCall getEtiquettesEtiquetteParserRuleCall_10_3_1_0() { return cEtiquettesEtiquetteParserRuleCall_10_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.qcm.dsl.QcmDsl.Proposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTexteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTexteSTRINGTerminalRuleCall_0_0 = (RuleCall)cTexteAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCorrecteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEstCorrecteAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEstCorrecteBOOLEANParserRuleCall_1_2_0 = (RuleCall)cEstCorrecteAssignment_1_2.eContents().get(0);
		
		//Proposition:
		//    texte=STRING ('correcte' '=' estCorrecte=BOOLEAN)?;
		@Override public ParserRule getRule() { return rule; }
		
		//texte=STRING ('correcte' '=' estCorrecte=BOOLEAN)?
		public Group getGroup() { return cGroup; }
		
		//texte=STRING
		public Assignment getTexteAssignment_0() { return cTexteAssignment_0; }
		
		//STRING
		public RuleCall getTexteSTRINGTerminalRuleCall_0_0() { return cTexteSTRINGTerminalRuleCall_0_0; }
		
		//('correcte' '=' estCorrecte=BOOLEAN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'correcte'
		public Keyword getCorrecteKeyword_1_0() { return cCorrecteKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//estCorrecte=BOOLEAN
		public Assignment getEstCorrecteAssignment_1_2() { return cEstCorrecteAssignment_1_2; }
		
		//BOOLEAN
		public RuleCall getEstCorrecteBOOLEANParserRuleCall_1_2_0() { return cEstCorrecteBOOLEANParserRuleCall_1_2_0; }
	}
	public class EtiquetteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.qcm.dsl.QcmDsl.Etiquette");
		private final Assignment cNomAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_0 = (RuleCall)cNomAssignment.eContents().get(0);
		
		//Etiquette:
		//    nom=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=ID
		public Assignment getNomAssignment() { return cNomAssignment; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_0() { return cNomIDTerminalRuleCall_0; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.qcm.dsl.QcmDsl.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final QuestionnaireElements pQuestionnaire;
	private final QuestionElements pQuestion;
	private final PropositionElements pProposition;
	private final EtiquetteElements pEtiquette;
	private final BOOLEANElements pBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QcmDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuestionnaire = new QuestionnaireElements();
		this.pQuestion = new QuestionElements();
		this.pProposition = new PropositionElements();
		this.pEtiquette = new EtiquetteElements();
		this.pBOOLEAN = new BOOLEANElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.qcm.dsl.QcmDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Questionnaire:
	//    'questionnaire' name=ID '{'
	//        ('melange' '=' melange=BOOLEAN)?
	//        questions+=Question*
	//    '}';
	public QuestionnaireElements getQuestionnaireAccess() {
		return pQuestionnaire;
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}
	
	//Question:
	//    'question' texte=STRING '{'
	//        'type' '=' type=('SIMPLE' | 'MULTIPLE')
	//        'difficulte' '=' difficulte=INT
	//        propositions+=Proposition+
	//        ('etiquettes' '=' etiquettes+=Etiquette (',' etiquettes+=Etiquette)*)?
	//    '}';
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//Proposition:
	//    texte=STRING ('correcte' '=' estCorrecte=BOOLEAN)?;
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}
	
	//Etiquette:
	//    nom=ID;
	public EtiquetteElements getEtiquetteAccess() {
		return pEtiquette;
	}
	
	public ParserRule getEtiquetteRule() {
		return getEtiquetteAccess().getRule();
	}
	
	//BOOLEAN:
	//    'true' | 'false';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
